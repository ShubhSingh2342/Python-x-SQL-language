
Python Programs for Database Connectivity using SQL

1. Connect Python to MySQL Database**

First, you'll need to install the MySQL connector for Python:
pip install mysql-connector-python

# Example Program to Connect to MySQL:
import mysql.connector

# Establishing connection
conn = mysql.connector.connect(
    host="localhost",  # Change to your host
    user="root",       # Your MySQL username
    password="",       # Your MySQL password
    database="School"  # Database to connect to
)

if conn.is_connected():
    print("Successfully connected to the database")
else:
    print("Connection failed")

# Closing the connection
conn.close()



2. Create a Table using Python

# SQL Command to Create Table:
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT,
    Gender CHAR(1)
);


# Python Program to Execute the SQL Command:
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

# SQL Query to create a table
query = """
CREATE TABLE IF NOT EXISTS Students (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT,
    Gender CHAR(1)
)
"""
cursor.execute(query)
print("Table created successfully")

# Close the cursor and connection
cursor.close()
conn.close()



3. Insert Data into a Table

# SQL Insert Command:

INSERT INTO Students (StudentID, FirstName, LastName, Age, Gender) 
VALUES (1, 'John', 'Doe', 16, 'M');


# Python Program to Insert Data:
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

# SQL Insert Query
query = """
INSERT INTO Students (StudentID, FirstName, LastName, Age, Gender)
VALUES (%s, %s, %s, %s, %s)
"""

# Data to be inserted
data = (1, 'John', 'Doe', 16, 'M')

# Execute the query with the data
cursor.execute(query, data)

# Commit the transaction
conn.commit()
print(f"{cursor.rowcount} record inserted.")

# Close the cursor and connection
cursor.close()
conn.close()



4. Retrieve Data from the Table
# SQL Select Command:

SELECT * FROM Students;


# Python Program to Retrieve Data:

import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

# SQL Select Query
query = "SELECT * FROM Students"

# Execute the query
cursor.execute(query)

# Fetch all rows from the result
rows = cursor.fetchall()

# Display the rows
for row in rows:
    print(row)

# Close the cursor and connection
cursor.close()
conn.close()



5. Update Data in the Table**

# SQL Update Command:

UPDATE Students 
SET Age = 17 
WHERE StudentID = 1;


# Python Program to Update Data:
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

# SQL Update Query
query = "UPDATE Students SET Age = %s WHERE StudentID = %s"
data = (17, 1)

# Execute the query with the data
cursor.execute(query, data)

# Commit the transaction
conn.commit()
print(f"{cursor.rowcount} record updated.")

# Close the cursor and connection
cursor.close()
conn.close()



6. Delete Data from the Table

# SQL Delete Command:

DELETE FROM Students WHERE StudentID = 1;


# Python Program to Delete Data:
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

# SQL Delete Query
query = "DELETE FROM Students WHERE StudentID = %s"
data = (1,)

# Execute the query with the data
cursor.execute(query, data)

# Commit the transaction
conn.commit()
print(f"{cursor.rowcount} record deleted.")

# Close the cursor and connection
cursor.close()
conn.close()




7. Perform Aggregation in SQL using Python

# SQL Query for Aggregation:

SELECT COUNT(*) AS TotalStudents FROM Students;


# Python Program for SQL Aggregation:

import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

# SQL Aggregation Query
query = "SELECT COUNT(*) FROM Students"

# Execute the query
cursor.execute(query)

# Fetch the result
result = cursor.fetchone()

print(f"Total number of students: {result[0]}")

# Close the cursor and connection
cursor.close()
conn.close()



8. Join Two Tables using Python**

# Create Another Table in SQL:

CREATE TABLE Classes (
    ClassID INT PRIMARY KEY,
    ClassName VARCHAR(50)
);

INSERT INTO Classes (ClassID, ClassName)
VALUES (1, 'Physics'), (2, 'Chemistry'), (3, 'Mathematics');


# SQL Query to Join Tables:

SELECT Students.FirstName, Classes.ClassName
FROM Students
JOIN Classes ON Students.StudentID = Classes.ClassID;


# Python Program to Perform Join:
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

# SQL Join Query
query = """
SELECT Students.FirstName, Classes.ClassName 
FROM Students
JOIN Classes ON Students.StudentID = Classes.ClassID
"""

# Execute the query
cursor.execute(query)

# Fetch all rows
rows = cursor.fetchall()

# Display the rows
for row in rows:
    print(row)

# Close the cursor and connection
cursor.close()
conn.close()




9. Handling Transactions in Python

# Python Program for Transaction Management:
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="School"
)

cursor = conn.cursor()

try:
    # Begin a transaction
    conn.start_transaction()

    # SQL Insert Query
    query1 = "INSERT INTO Students (StudentID, FirstName, LastName, Age, Gender) VALUES (%s, %s, %s, %s, %s)"
    data1 = (4, 'Sam', 'Green', 17, 'M')

    # SQL Update Query
    query2 = "UPDATE Students SET Age = %s WHERE StudentID = %s"
    data2 = (18, 4)

    # Execute both queries
    cursor.execute(query1, data1)
    cursor.execute(query2, data2)

    # Commit the transaction
    conn.commit()
    print("Transaction committed successfully")

except:
    # Rollback in case of error
    conn.rollback()
    print("Transaction failed and rolled back")

# Close the cursor and connection
cursor.close()
conn.close()

